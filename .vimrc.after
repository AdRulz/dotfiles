set nocompatible
set nosol
set virtualedit=all
set ttyfast
set scrolloff=8
set cmdheight=1
set winheight=39
set previewheight=30
set winminheight=3
set winwidth=150
set winminwidth=50
set timeoutlen=300

" allow unsaved background buffers and remember marks/undo for them
set hidden

set wildignore+=*/tmp/*

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUSSO TOURISTO 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set keymap=russian-jcukenmac
set iminsert=0
set imsearch=0
highlight lCursor ctermbg=Cyan
setlocal spell spelllang=ru_yo,en_us

imap <c-l> <c-^>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UNMAP JANUS 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nunmap <leader>fef
nunmap <leader>fc
nunmap <leader>tw

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ZEN CODING
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.scss set filetype=scss
let g:user_zen_settings = {
      \  'scss' : {
      \    'filters' : 'fc',
      \  }
      \}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TABULAR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme twilight256 
let g:solarized_diffmode = "high"
let g:solarized_termtrans = 1
let g:solarized_termcolors = 256

"Highlight commas for best diff with dots (special for Skyhook Mono) 

highlight commaInsteadDot ctermfg=red
autocmd! BufRead,BufNewFile * match commaInsteadDot "[a-z],[a-z]"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move lines with ALT 
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>

" Clear the search buffer when hitting return
nnoremap <cr> :nohlsearch<cr>

" Replace highlighted text (Visual Mode)
vnoremap <C-r> <Esc>:%s/<C-r>+//gc<left><left><left>

nnoremap <leader><leader> <c-^>

" format the entire file
nnoremap <c-i> ggVG=''j


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KILL ARROW KEYS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC CtrlP TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction

map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gt :CtrlPTag<cr>

map <leader>gR :call ShowRoutes()<cr>
map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>
map <leader>gc :CtrlPClearCache<cr>\|:CtrlP app/controllers<cr>
map <leader>gm :CtrlPClearCache<cr>\|:CtrlP app/models<cr>
map <leader>ga :CtrlPClearCache<cr>\|:CtrlP app/serializers<cr>
map <leader>gh :CtrlPClearCache<cr>\|:CtrlP app/helpers<cr>
map <leader>gl :CtrlPClearCache<cr>\|:CtrlP lib<cr>
map <leader>gp :CtrlPClearCache<cr>\|:CtrlP public<cr>
map <leader>gs :CtrlPClearCache<cr>\|:CtrlP app/assets/stylesheets<cr>
map <leader>gf :CtrlPClearCache<cr>\|:CtrlP spec/features<cr>
map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
map <leader>F :CtrlPClearCache<cr>\|:CtrlP %%<cr>

map <leader>gjv :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/views<cr>
map <leader>gjc :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/controllers<cr>
map <leader>gjm :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/models<cr>
map <leader>gjh :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/helpers<cr>
map <leader>gjr :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/routes<cr>
map <leader>gjt :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts/templates<cr>
map <leader>gjs :CtrlPClearCache<cr>\|:CtrlP app/assets/javascripts<cr>
map <leader>gjf :CtrlPClearCache<cr>\|:CtrlP spec/javascripts<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN MVC's OBJECTS.
" EMBER.JS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenMVCTemplate()
  let new_file = TemplateForCurrentFile()
  exec ':e ' . new_file
endfunction

function! OpenMVCController()
  let new_file = ControllerForCurrentFile()
  exec ':e ' . new_file
endfunction

function! OpenMVCView()
  let new_file = ViewForCurrentFile()
  exec ':e ' . new_file
endfunction

function! OpenMVCRoute()
  let new_file = RouteForCurrentFile()
  exec ':e ' . new_file
endfunction

function! TemplateForCurrentFile()
  let current_file = expand("%")
  let is_view = match(current_file, '\<views\>')  != -1
  let is_template = match(current_file, '\<templates\>')  != -1
  let is_controller = match(current_file, '\<controllers\>')  != -1
  let is_route = match(current_file, '\<routes\>')  != -1

  let new_file = current_file
  let new_file = substitute(new_file, '\.\+.*', '.handlebars', '')

  if is_view
    let new_file = substitute(new_file, '_view', '', '')
    let new_file = substitute(new_file, '\<views\>', 'templates', '')
  end

  if is_route
    let new_file = substitute(new_file, '_route', '', '')
    let new_file = substitute(new_file, '\<routes\>', 'templates', '')
  end

  if is_controller
    let new_file = substitute(new_file, '\<controllers\>', 'templates', '')
    let new_file = substitute(new_file, '_controller', '', '')
  end

  return new_file
endfunction

function! ControllerForCurrentFile()
  let current_file = expand("%")
  let is_view = match(current_file, '\<views\>')  != -1
  let is_template = match(current_file, '\<templates\>')  != -1
  let is_controller = match(current_file, '\<controllers\>')  != -1
  let is_route = match(current_file, '\<routes\>')  != -1

  let new_file = current_file

  if is_view
    let new_file = substitute(new_file, '_view', '_controller', '')
    let new_file = substitute(new_file, '\<views\>', 'controllers', '')
  end
  if is_template
    let new_file = substitute(new_file, '\.\+.*', '_controller.js.coffee', '') "coffee is hardcoded :(
    let new_file = substitute(new_file, '\<templates\>', 'controllers', '')
  end
  if is_route
    let new_file = substitute(new_file, '_route', '_controller', '')
    let new_file = substitute(new_file, '\<routes\>', 'controllers', '')
  end
  return new_file
endfunction

function! ViewForCurrentFile()
  let current_file = expand("%")
  let is_view = match(current_file, '\<views\>')  != -1
  let is_template = match(current_file, '\<templates\>')  != -1
  let is_controller = match(current_file, '\<controllers\>')  != -1
  let is_route = match(current_file, '\<routes\>')  != -1

  let new_file = current_file

  if is_controller
    let new_file = substitute(new_file, '_controller', '_view', '')
    let new_file = substitute(new_file, '\<controllers\>', 'views', '')
  end
  if is_template
    let new_file = substitute(new_file, '\.\+.*', '_view.js.coffee', '') "coffee is hardcoded :(
    let new_file = substitute(new_file, '\<templates\>', 'views', '')
  end
  if is_route
    let new_file = substitute(new_file, '_route', '_view', '')
    let new_file = substitute(new_file, '\<routes\>', 'views', '')
  end
  return new_file
endfunction

function! RouteForCurrentFile()
  let current_file = expand("%")
  let is_view = match(current_file, '\<views\>')  != -1
  let is_template = match(current_file, '\<templates\>')  != -1
  let is_controller = match(current_file, '\<controllers\>')  != -1
  let is_route = match(current_file, '\<routes\>')  != -1

  let new_file = current_file

  if is_controller
    let new_file = substitute(new_file, '_controller', '_route', '')
    let new_file = substitute(new_file, '\<controllers\>', 'routes', '')
  end
  if is_template
    let new_file = substitute(new_file, '\.\+.*', '_route.js.coffee', '') "coffee is hardcoded :(
    let new_file = substitute(new_file, '\<templates\>', 'routes', '')
  end
  if is_view
    let new_file = substitute(new_file, '_view', '_route', '')
    let new_file = substitute(new_file, '\<views\>', 'routes', '')
  end
  return new_file
endfunction

nnoremap <leader>.t :call OpenMVCTemplate()<cr>
nnoremap <leader>.c :call OpenMVCController()<cr>
nnoremap <leader>.v :call OpenMVCView()<cr>
nnoremap <leader>.r :call OpenMVCRoute()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction

function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') || match(current_file, '\<helpers\>') != -1 || match(current_file, '\<javascripts\>') != -1
  let in_assets = match(current_file, '\<javascripts\>')  != -1

  let is_template = match(current_file, '\<templates\>')  != -1

  if going_to_spec

    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end

    if in_assets
      let new_file = substitute(new_file, '^assets/', '', '')
    end


    let new_file = substitute(new_file, '\.js\(\.\{0,1\}\)\@=', '_spec.js', '')
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = substitute(new_file, '\.handlebars$', '_spec.js', '')
    let new_file = 'spec/' . new_file
  else

    if is_template
      let new_file = substitute(new_file, '_spec\.js', '.handlebars', '')
    else
      let new_file = substitute(new_file, '_spec\.js', '.js', '')
      let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    end
    let new_file = substitute(new_file, '^spec/', '', '')

    if in_assets
      let new_file = 'assets/' . new_file
    end
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction

nnoremap <leader>.s :call OpenTestAlternate()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call vroom#RunTestFile()<cr>
map <leader>T :call vroom#RunNearestTest()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" EXEC PROJECT`S VIMRC
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! ExecProjectVimrc()
  let current_dir =  system('pwd')
  let home_dir =  system('echo $HOME')
  if filereadable('.vimrc') && current_dir != home_dir
    source .vimrc
  endif
endfunction

call ExecProjectVimrc()
